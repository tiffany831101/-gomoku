{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","board","Array","fill","player","react_default","a","createElement","className","winner","winLines","i","push","Math","floor","length","_winLines$_i","slicedToArray","b","c","d","e","setState","index","newBoard","checkWinner","_this2","Box","map","box","key","onClick","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7d636fd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      board: Array(361).fill(null),\r\n      player: <div className=\"circle white\"></div>,\r\n      winner: null,\r\n    }\r\n  }\r\n\r\n  checkWinner() {\r\n    let winLines = [];\r\n    for (let i = 0; i < 19 * 19; i++) {\r\n      //    衡的勝利方式\r\n      if (i % 19 <= 14) {\r\n        winLines.push([i, i + 1, i + 2, i + 3, i + 4])\r\n      }\r\n      // 值得勝利方式\r\n      if (i <= 284) {\r\n        winLines.push([i, i + 19, i + 38, i + 57, i + 76])\r\n      }\r\n      //   下坡勝利方式\r\n      if (i % 19 <= 14 && (Math.floor(i / 19) < 15)) {\r\n        winLines.push([i, i + 20, i + 40, i + 60, i + 80])\r\n      }\r\n      //    上坡勝利方式\r\n      if (i % 19 >= 4 && (Math.floor(i / 19) < 15)) {\r\n        winLines.push([i, i + 18, i + 36, i + 54, i + 72])\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < winLines.length; i++) {\r\n      const [a, b, c, d, e] = winLines[i];\r\n      if (this.state.board[a] !== null &&\r\n        this.state.board[b] !== null &&\r\n        this.state.board[c] !== null &&\r\n        this.state.board[d] !== null &&\r\n        this.state.board[e] !== null\r\n      ) {\r\n        if (this.state.board[a].props.className === this.state.board[b].props.className &&\r\n          this.state.board[a].props.className === this.state.board[c].props.className &&\r\n          this.state.board[a].props.className === this.state.board[d].props.className &&\r\n          this.state.board[a].props.className === this.state.board[e].props.className\r\n        ) {\r\n          if (this.state.board[a].props.className === \"circle white\") {\r\n            this.setState({\r\n              winner: \"White wins\"\r\n            })\r\n          } else {\r\n            this.setState({\r\n              winner: \"Black wins\"\r\n            })\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleClick(index) {\r\n    let newBoard = this.state.board;\r\n    if (this.state.board[index] === null && !this.state.winner) {\r\n      newBoard[index] = this.state.player;\r\n      this.setState({\r\n        board: newBoard,\r\n        player: this.state.player.props.className === \"circle white\" ? <div className=\"circle black\"></div> : <div className=\"circle white\"></div>\r\n      })\r\n      this.checkWinner()\r\n\r\n\r\n\r\n    }\r\n  }\r\n  render() {\r\n    const Box = this.state.board.map(\r\n      (box, index) =>\r\n        <div className=\"box\"\r\n          key={index}\r\n          onClick={() => this.handleClick(index)}>\r\n          {box}\r\n        </div>)\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>five in a row</h1>\r\n        <p>{this.state.winner}</p>\r\n        <div className=\"board\">\r\n          {Box}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}